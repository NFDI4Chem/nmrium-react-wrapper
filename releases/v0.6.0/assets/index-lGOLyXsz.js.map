{"version":3,"mappings":"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","names":["registerSW","options","immediate","onNeedRefresh","onOfflineReady","onRegistered","onRegisteredSW","onRegisterError","wb","registerPromise","sendSkipWaitingMessage","updateServiceWorker","_reloadPage","register","Workbox","__vitePreload","onNeedRefreshCalled","showSkipWaitingPrompt","event","r","e","namespace","trigger","type","data","on","dataListener","eventOptions","allowedOrigins","listener","origin","targetType","url","events","getFileNameFromURL","isArrayOfString","logger","FifoLogger","log","PARSING_OPTIONS","loadSpectraFromFiles","files","fileCollection","fileCollectionFromFiles","read","loadSpectraFromURLs","urls","entries","refURL","name","path","readFromWebSource","useLoadSpectra","setData","useState","activeTab","setActiveTab","isLoading","setLoading","load","useCallback","result","error","loadError","useMemo","view","CURRENT_EXPORT_VERSION","getNmrXivWorkspace","hidePanelOnLoad","DEFAULT_PREFERENCES","usePreferences","configuration","setConfiguration","useLayoutEffect","href","parameters","preferences","workspace","defaultEmptyMessage","_a","customWorkspaces","createCustomWorkspaces","readAllowedOrigins","response","useWhiteList","setAllowedOrigins","isFetchAllowedOriginsPending","startTransition","useTransition","useEffect","whitelist","versionInfo","styles","css","AboutUsModal","isOpenDialog","openDialog","closeDialog","useOnOff","jsxs","Fragment","jsx","InfoButton","Modal","Separator","VersionInfo","version","onClick","NMRiumWrapper","nmriumRef","useRef","setDate","dataChangeHandler","state","source","loadSpectra","loadedData","clearActionListener","request","blob","clearLoadListener","loadData","RootLayout","NMRium","loadFilesFromURLs","fetches","NMRiumWrapperDemo","Button","jsonData","rootContainer","updateSW","root","createRoot","RootWrapper","Router","Routes","Route"],"sources":["../../../../../../../../@vite-plugin-pwa/virtual:pwa-register","../../../src/events/event.ts","../../../src/utilities/getFileNameFromURL.ts","../../../src/utilities/isArrayOfString.ts","../../../src/hooks/useLoadSpectra.ts","../../../src/workspaces/nmrxiv.ts","../../../src/hooks/usePreferences.ts","../../../src/hooks/useWhiteList.ts","../../../src/versionInfo.ts","../../../src/modal/AboutUsModal.tsx","../../../src/NMRiumWrapper.tsx","../../../src/utilities/loadFilesFromURLs.ts","../../../src/demo/NMRiumWrapperDemo.tsx","../../../src/index.tsx"],"sourcesContent":["// src/client/build/register.ts\nvar autoUpdateMode = \"false\";\nvar selfDestroying = \"false\";\nvar auto = autoUpdateMode === \"true\";\nvar autoDestroy = selfDestroying === \"true\";\nfunction registerSW(options = {}) {\n  const {\n    immediate = false,\n    onNeedRefresh,\n    onOfflineReady,\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  } = options;\n  let wb;\n  let registerPromise;\n  let sendSkipWaitingMessage;\n  const updateServiceWorker = async (_reloadPage = true) => {\n    await registerPromise;\n    if (!auto) {\n      await sendSkipWaitingMessage?.();\n    }\n  };\n  async function register() {\n    if (\"serviceWorker\" in navigator) {\n      const { Workbox } = await import(\"workbox-window\");\n      wb = new Workbox(\"./sw.js\", { scope: \"./\", type: \"classic\" });\n      sendSkipWaitingMessage = async () => {\n        await wb?.messageSkipWaiting();\n      };\n      if (!autoDestroy) {\n        if (auto) {\n          wb.addEventListener(\"activated\", (event) => {\n            if (event.isUpdate || event.isExternal)\n              window.location.reload();\n          });\n          wb.addEventListener(\"installed\", (event) => {\n            if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n        } else {\n          let onNeedRefreshCalled = false;\n          const showSkipWaitingPrompt = () => {\n            onNeedRefreshCalled = true;\n            wb?.addEventListener(\"controlling\", (event) => {\n              if (event.isUpdate)\n                window.location.reload();\n            });\n            onNeedRefresh?.();\n          };\n          wb.addEventListener(\"installed\", (event) => {\n            if (typeof event.isUpdate === \"undefined\") {\n              if (typeof event.isExternal !== \"undefined\") {\n                if (event.isExternal)\n                  showSkipWaitingPrompt();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              } else {\n                if (event.isExternal)\n                  window.location.reload();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              }\n            } else if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n          wb.addEventListener(\"waiting\", showSkipWaitingPrompt);\n          wb.addEventListener(\"externalwaiting\", showSkipWaitingPrompt);\n        }\n      }\n      wb.register({ immediate }).then((r) => {\n        if (onRegisteredSW)\n          onRegisteredSW(\"./sw.js\", r);\n        else\n          onRegistered?.(r);\n      }).catch((e) => {\n        onRegisterError?.(e);\n      });\n    }\n  }\n  registerPromise = register();\n  return updateServiceWorker;\n}\nexport {\n  registerSW\n};\n","import { EventType, EventData } from './types';\n\nconst namespace = 'nmr-wrapper';\n\nfunction trigger<T extends EventType>(type: T, data: EventData<T>) {\n  window.parent.postMessage({ type: `${namespace}:${type}`, data }, '*');\n}\n\nfunction on<T extends EventType>(\n  type: T,\n  dataListener: (data: EventData<T>) => void,\n  options: {\n    eventOptions?: boolean | AddEventListenerOptions;\n    allowedOrigins?: string[];\n  } = {},\n) {\n  const { eventOptions, allowedOrigins = [] } = options;\n\n  function listener(event: MessageEvent) {\n    const {\n      origin,\n      data: { type: targetType, data },\n    } = event;\n\n    const url = new URL(origin);\n\n    const skipOriginCheck =\n      allowedOrigins.length === 0 || allowedOrigins.includes('*');\n\n    if (!skipOriginCheck && !allowedOrigins.includes(url.origin)) {\n      throw new Error(`Invalid Origin ${origin}`);\n    }\n\n    if (`${namespace}:${type}` === targetType) {\n      dataListener?.(data);\n    }\n  }\n  window.addEventListener(`message`, listener, eventOptions);\n\n  return () => window.removeEventListener(`message`, listener);\n}\n\nexport default { trigger, on };\n","export function getFileNameFromURL(url: string) {\n  return url.slice(Math.max(0, url.lastIndexOf('/') + 1));\n}\n","//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isArrayOfString(data: any[]) {\n  return data.every((url) => typeof url === 'string');\n}\n","import { FifoLogger } from 'fifo-logger';\nimport { fileCollectionFromFiles } from 'filelist-utils';\nimport {\n  read,\n  readFromWebSource,\n  NmriumState,\n  CURRENT_EXPORT_VERSION,\n  ParsingOptions,\n  ViewState,\n} from 'nmr-load-save';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport events from '../events';\nimport { getFileNameFromURL } from '../utilities/getFileNameFromURL';\nimport { isArrayOfString } from '../utilities/isArrayOfString';\n\ntype DeepPartial<T> = {\n  [K in keyof T]?: T[K] extends object ? DeepPartial<T[K]> : T[K];\n};\n\nconst logger = new FifoLogger({\n  onChange: (log) => {\n    if (log && ['error', 'fatal'].includes(log.levelLabel) && log?.error) {\n      events.trigger('error', log.error);\n      // eslint-disable-next-line no-console\n      console.log(log.error);\n    }\n  },\n});\n\nconst PARSING_OPTIONS: Partial<ParsingOptions> = {\n  onLoadProcessing: { autoProcessing: true },\n  sourceSelector: { general: { dataSelection: 'preferFT' } },\n  logger,\n};\n\nasync function loadSpectraFromFiles(files: File[]) {\n  const fileCollection = await fileCollectionFromFiles(files);\n\n  const {\n    nmriumState: { data },\n  } = await read(fileCollection, PARSING_OPTIONS);\n  return data;\n}\n\nasync function loadSpectraFromURLs(urls: string[]) {\n  const entries = urls.map((url) => {\n    const refURL = new URL(url);\n    const name = getFileNameFromURL(url);\n    let path = refURL.pathname;\n    const hasExtension = name && name.includes('.');\n    if (!hasExtension) {\n      path = `${path}.zip`;\n    }\n    return { relativePath: path, baseURL: refURL.origin };\n  }, []);\n\n  const { data } = await readFromWebSource({ entries }, PARSING_OPTIONS);\n  return data;\n}\n\ntype NMRiumData = NmriumState['data'];\n\ntype LoadOptions =\n  | { urls: string[]; activeTab?: string }\n  | { files: File[]; activeTab?: string };\n\ninterface UseLoadSpectraResult {\n  data: { version: number; data: NMRiumData };\n  load: (options: LoadOptions) => void;\n  isLoading: boolean;\n}\n\nexport function useLoadSpectra(): UseLoadSpectraResult {\n  const [data, setData] = useState<NMRiumData>({ spectra: [], molecules: [] });\n  const [activeTab, setActiveTab] = useState<string>();\n  const [isLoading, setLoading] = useState<boolean>(false);\n\n  const load = useCallback(async (options: LoadOptions) => {\n    setLoading(true);\n    try {\n      if ('urls' in options) {\n        if (isArrayOfString(options.urls)) {\n          const result = await loadSpectraFromURLs(options.urls);\n          setData(result as NMRiumData);\n          setActiveTab(options?.activeTab);\n        } else {\n          throw new Error('The input must be a valid urls array of string[]');\n        }\n      } else if ('files' in options) {\n        const result = await loadSpectraFromFiles(options.files);\n        setData(result as NMRiumData);\n        setActiveTab(options?.activeTab);\n      }\n    } catch (error: unknown) {\n      const loadError = error as Error;\n      events.trigger('error', loadError);\n      // eslint-disable-next-line no-console\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return useMemo(() => {\n    let view: DeepPartial<ViewState> = {};\n    if (activeTab) {\n      view = { spectra: { activeTab } };\n    }\n\n    return {\n      data: { version: CURRENT_EXPORT_VERSION, data, view },\n      load,\n      isLoading,\n    };\n  }, [activeTab, data, isLoading, load]);\n}\n","import { InnerWorkspace } from 'nmr-load-save';\n\nexport function getNmrXivWorkspace(hidePanelOnLoad = false): InnerWorkspace {\n  return {\n    version: 1,\n    label: 'nmrXiv',\n    general: {\n      dimmedSpectraOpacity: 0.1,\n      verticalSplitterPosition: '160px',\n      verticalSplitterCloseThreshold: 600,\n      spectraRendering: 'auto',\n      loggingLevel: 'info',\n      invert: false,\n    },\n    display: {\n      general: {\n        experimentalFeatures: { display: true },\n        hidePanelOnLoad,\n        hideHelp: true,\n        hideLogs: true,\n        hideWorkspaces: true,\n        hideGeneralSettings: true,\n      },\n\n      panels: {\n        spectraPanel: { display: true, open: true },\n        informationPanel: { display: true, open: false },\n        rangesPanel: { display: true, open: false },\n        structuresPanel: { display: true, open: false },\n        processingsPanel: { display: true, open: false },\n        zonesPanel: { display: true, open: false },\n        summaryPanel: { display: true, open: false },\n      },\n      toolBarButtons: {\n        baselineCorrection: true,\n        exclusionZones: true,\n        exportAs: true,\n        fft: true,\n        import: true,\n        multipleSpectraAnalysis: true,\n        phaseCorrection: true,\n        rangePicking: true,\n        realImaginary: true,\n        slicing: true,\n        spectraCenterAlignments: true,\n        spectraStackAlignments: true,\n        apodization: true,\n        zeroFilling: true,\n        zonePicking: true,\n        zoomOut: true,\n        zoom: true,\n        autoRangeAndZonePicking: true,\n        fftDimension1: true,\n        fftDimension2: true,\n      },\n    },\n  };\n}\n","import { CustomWorkspaces, WorkspacePreferences } from 'nmr-load-save';\nimport { NMRiumWorkspace } from 'nmrium';\nimport { useLayoutEffect, useState } from 'react';\n\nimport { getNmrXivWorkspace } from '../workspaces/nmrxiv';\n\ninterface Preferences {\n  preferences: WorkspacePreferences | undefined;\n  workspace: NMRiumWorkspace | undefined;\n  defaultEmptyMessage: string | undefined;\n  customWorkspaces: CustomWorkspaces;\n}\n\nconst DEFAULT_PREFERENCES = {\n  preferences: undefined,\n  workspace: undefined,\n  defaultEmptyMessage: undefined,\n  customWorkspaces: {},\n};\n\nexport function usePreferences() {\n  const [configuration, setConfiguration] =\n    useState<Preferences>(DEFAULT_PREFERENCES);\n\n  useLayoutEffect(() => {\n    const { href } = window.location;\n    const parameters = new URL(href).searchParams;\n\n    let preferences: WorkspacePreferences | undefined;\n    let workspace: NMRiumWorkspace | undefined;\n    let defaultEmptyMessage: string | undefined;\n    let hidePanelOnLoad = false;\n\n    if (parameters.has('workspace')) {\n      workspace = parameters.get('workspace') as NMRiumWorkspace;\n    }\n\n    if (parameters.has('preferences')) {\n      preferences = JSON.parse(parameters.get('preferences') || '');\n    }\n\n    if (parameters.has('defaultEmptyMessage')) {\n      defaultEmptyMessage = parameters.get('defaultEmptyMessage') as string;\n    }\n    if (parameters.has('hidePanelOnLoad')) {\n      hidePanelOnLoad =\n        parameters.get('hidePanelOnLoad')?.toLowerCase() === 'true';\n    }\n\n    const customWorkspaces = createCustomWorkspaces({ hidePanelOnLoad });\n    setConfiguration({\n      preferences,\n      workspace,\n      defaultEmptyMessage,\n      customWorkspaces,\n    });\n  }, []);\n\n  return configuration;\n}\n\ninterface CreateCustomWorkspacesOptions {\n  hidePanelOnLoad?: boolean;\n}\n\nfunction createCustomWorkspaces(\n  options: CreateCustomWorkspacesOptions,\n): CustomWorkspaces {\n  const { hidePanelOnLoad = false } = options;\n\n  return {\n    nmrXiv: getNmrXivWorkspace(hidePanelOnLoad),\n  };\n}\n","import { useEffect, useState, useTransition } from 'react';\n\nasync function readAllowedOrigins() {\n  return fetch(\n    'https://raw.githubusercontent.com/NFDI4Chem/nmrium-react-wrapper/main/src/allowed-origins.json',\n  ).then((response) => response.json());\n}\n\nexport function useWhiteList() {\n  const [allowedOrigins, setAllowedOrigins] = useState([]);\n  const [isFetchAllowedOriginsPending, startTransition] = useTransition();\n\n  useEffect(() => {\n    startTransition(() => {\n      void readAllowedOrigins().then((whitelist) =>\n        setAllowedOrigins(whitelist),\n      );\n    });\n  }, []);\n\n  return {\n    allowedOrigins,\n    isFetchAllowedOriginsPending,\n  };\n}\n","export default { version: 'HEAD' };\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Modal, useOnOff } from 'react-science/ui';\n\nimport versionInfo from '../versionInfo';\n\nconst styles = css`\n  width: 30vw;\n  min-width: 400px;\n  display: flex;\n  flex-direction: column;\n  user-select: none;\n\n  button:focus {\n    outline: none;\n  }\n\n  .container {\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  span.title {\n    font-weight: bold;\n    color: #ea580c;\n    font-size: 2em;\n  }\n\n  a {\n    color: #969696;\n  }\n\n  a:hover,\n  a:focus {\n    color: #00bcd4;\n  }\n\n  .header {\n    span {\n      color: #464646;\n      font-size: 15px;\n      flex: 1;\n      user-select: none;\n    }\n  }\n`;\n\nfunction AboutUsModal() {\n  const [isOpenDialog, openDialog, closeDialog] = useOnOff(false);\n  return (\n    <>\n      <InfoButton onClick={openDialog} />\n      <Modal\n        hasCloseButton\n        isOpen={isOpenDialog}\n        onRequestClose={closeDialog}\n        maxWidth={1000}\n      >\n        <div css={styles}>\n          <Modal.Header>\n            <div className=\"header\">\n              <span>About NMRium react wrapper</span>\n            </div>\n          </Modal.Header>\n          <div className=\"container\">\n            <span className=\"title\"> NMRium react wrapper</span>\n            <Separator />\n            Version <VersionInfo />\n            <Separator />\n            <a\n              href=\"https://github.com/NFDI4Chem/nmrium-react-wrapper\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              GitHub ( https://github.com/NFDI4Chem/nmrium-react-wrapper )\n            </a>\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n}\n\nexport default AboutUsModal;\n\nfunction VersionInfo() {\n  const { version } = versionInfo;\n  if (version === 'HEAD') {\n    return <>HEAD</>;\n  } else if (version.startsWith('git-')) {\n    return (\n      <a\n        href={`https://github.com/NFDI4Chem/nmrium-react-wrapper/tree/${version.slice(\n          4,\n        )}`}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        git-{version.slice(4, 14)}\n      </a>\n    );\n  } else {\n    return (\n      <a\n        href={`https://github.com/NFDI4Chem/nmrium-react-wrapper/tree/${version}`}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        {version}\n      </a>\n    );\n  }\n}\n\nfunction InfoButton({ onClick }) {\n  return (\n    <button\n      onClick={onClick}\n      type=\"button\"\n      style={{\n        fontSize: '13px',\n        textAlign: 'center',\n        width: '25px',\n        height: '25px',\n        borderRadius: '25px',\n        border: '0.55px solid #ea580c',\n        left: '5px',\n        bottom: '10px',\n        position: 'absolute',\n      }}\n    >\n      &#9432;\n    </button>\n  );\n}\n\nfunction Separator() {\n  return (\n    <span\n      style={{\n        borderBottom: '1px solid gray',\n        width: '15px',\n        height: '1px',\n        margin: '10px 0',\n      }}\n    />\n  );\n}\n","import { NMRium, NMRiumData, NMRiumRef, NMRiumChangeCb } from 'nmrium';\nimport { useEffect, useState, useCallback, CSSProperties, useRef } from 'react';\nimport { RootLayout } from 'react-science/ui';\n\nimport events from './events';\nimport { useLoadSpectra } from './hooks/useLoadSpectra';\nimport { usePreferences } from './hooks/usePreferences';\nimport { useWhiteList } from './hooks/useWhiteList';\nimport AboutUsModal from './modal/AboutUsModal';\n\nconst styles: Record<'container' | 'loadingContainer', CSSProperties> = {\n  container: {\n    height: '100%',\n    width: '100%',\n    position: 'relative',\n  },\n\n  loadingContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    zIndex: 1,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#ffffffc9',\n    fontSize: '1.4em',\n    userSelect: 'none',\n    WebkitUserSelect: 'none',\n  },\n};\n\nexport default function NMRiumWrapper() {\n  const { allowedOrigins, isFetchAllowedOriginsPending } = useWhiteList();\n  const nmriumRef = useRef<NMRiumRef>(null);\n  const [data, setDate] = useState<NMRiumData>();\n\n  const { workspace, preferences, defaultEmptyMessage, customWorkspaces } =\n    usePreferences();\n  const dataChangeHandler = useCallback<NMRiumChangeCb>((state, source) => {\n    events.trigger('data-change', {\n      state,\n      source,\n    });\n  }, []);\n\n  const { load: loadSpectra, isLoading, data: loadedData } = useLoadSpectra();\n\n  useEffect(() => {\n    if (!isLoading) {\n      setDate(loadedData as unknown as NMRiumData);\n    }\n  }, [isLoading, loadedData]);\n\n  useEffect(() => {\n    const clearActionListener = events.on(\n      'action-request',\n      (request) => {\n        switch (request.type) {\n          case 'exportSpectraViewerAsBlob': {\n            const blob = nmriumRef.current?.getSpectraViewerAsBlob();\n            if (blob) {\n              events.trigger('action-response', {\n                type: request.type,\n                data: blob,\n              });\n            }\n            break;\n          }\n          default: {\n            throw new Error(\n              `ERROR! Property 'type' accept only 'exportViewerAsBlob'.`,\n            );\n          }\n        }\n      },\n      { allowedOrigins },\n    );\n    const clearLoadListener = events.on(\n      'load',\n      (loadData) => {\n        switch (loadData.type) {\n          case 'nmrium':\n            setDate(loadData.data);\n            break;\n          case 'file': {\n            const { data: files, activeTab } = loadData;\n            loadSpectra({ files, activeTab });\n            break;\n          }\n          case 'url': {\n            const { data: urls, activeTab } = loadData;\n            loadSpectra({ urls, activeTab });\n            break;\n          }\n          default: {\n            throw new Error(\n              `ERROR! Property 'type' accept only nmrium, url or file.`,\n            );\n          }\n        }\n      },\n      { allowedOrigins },\n    );\n\n    return () => {\n      clearLoadListener();\n      clearActionListener();\n    };\n  });\n\n  return (\n    <RootLayout style={styles.container}>\n      {' '}\n      {isFetchAllowedOriginsPending && (\n        <div style={styles.loadingContainer}>\n          <span>Loading .... </span>\n        </div>\n      )}\n      <NMRium\n        ref={nmriumRef}\n        data={data}\n        onChange={dataChangeHandler}\n        preferences={preferences}\n        workspace={workspace}\n        emptyText={defaultEmptyMessage}\n        onError={(error) => {\n          events.trigger('error', error);\n        }}\n        customWorkspaces={customWorkspaces}\n      />\n      <AboutUsModal />\n    </RootLayout>\n  );\n}\n\nexport { type NMRiumData } from 'nmrium';\n","import { getFileNameFromURL } from './getFileNameFromURL';\n\nexport function loadFilesFromURLs(urls: string[]): Promise<File[]> {\n  const fetches = urls.map((url) =>\n    fetch(url)\n      .then((response) => response.arrayBuffer())\n      .then((data) => {\n        let name = getFileNameFromURL(url);\n        const hasExtension = name && name.includes('.');\n        if (!hasExtension) {\n          name = `${name}.zip`;\n        }\n        return new File([data], name);\n      }),\n  );\n\n  return Promise.all(fetches);\n}\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { NMRiumData } from 'nmrium';\nimport Button from 'nmrium/lib/component/elements/Button';\n\nimport NMRiumWrapper from '../NMRiumWrapper';\nimport events from '../events';\nimport { loadFilesFromURLs } from '../utilities/loadFilesFromURLs';\n\nimport jsonData from './data/test.json';\n\nconst styles = {\n  container: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  `,\n  header: css`\n    height: 40px;\n    width: 100%;\n    padding: 5px;\n    display: flex;\n  `,\n};\n\nexport default function NMRiumWrapperDemo() {\n  return (\n    <div css={styles.container}>\n      <div id=\"header\" css={styles.header}>\n        <Button.Done\n          style={{ marginRight: '10px' }}\n          onClick={() => {\n            events.trigger('load', {\n              data: jsonData as NMRiumData,\n              type: 'nmrium',\n            });\n          }}\n        >\n          Test load from json\n        </Button.Done>\n\n        <Button.Done\n          style={{ marginRight: '10px' }}\n          onClick={() => {\n            events.trigger('load', {\n              data: [\n                'https://cheminfo.github.io/nmr-dataset-demo/cytisine/13c.jdx',\n                'https://cheminfo.github.io/nmr-dataset-demo/cytisine/1h.jdx',\n                'https://cheminfo.github.io/bruker-data-test/data/zipped/aspirin-1h.zip',\n                // '../data/13c.zip',\n                // 'https://cloud.uni-jena.de/s/y72GbCX8bJbmpJT/download/10.zip',\n                // 'https://cloud.uni-jena.de/s/jsMed9fmqWZzo6r/download/53.zip',\n              ],\n              type: 'url',\n            });\n          }}\n        >\n          Test Load from URLS\n        </Button.Done>\n\n        <Button.Done\n          style={{ marginRight: '10px' }}\n          onClick={() => {\n            events.trigger('load', {\n              data: [\n                'https://cheminfo.github.io/bruker-data-test/data/zipped/aspirin-1h',\n              ],\n              type: 'url',\n            });\n          }}\n        >\n          Test Load URL without extension\n        </Button.Done>\n        <Button.Done\n          style={{ marginRight: '10px' }}\n          onClick={() => {\n            void loadFilesFromURLs([\n              '../data/COSY-12.zip',\n              '../data/HMBC-13.zip',\n              '../data/13c.zip',\n            ]).then((files) => {\n              events.trigger('load', {\n                data: files,\n                type: 'file',\n                activeTab: '13C',\n              });\n            });\n          }}\n        >\n          Test Load Files\n        </Button.Done>\n        <Button.Done\n          className=\"logger-btn\"\n          onClick={() => {\n            void loadFilesFromURLs(['../data/sample-with-error.zip']).then(\n              (files) => {\n                events.trigger('load', {\n                  data: files,\n                  type: 'file',\n                  activeTab: '13C',\n                });\n              },\n            );\n          }}\n        >\n          Test Logger\n        </Button.Done>\n      </div>\n\n      <NMRiumWrapper />\n    </div>\n  );\n}\n","import 'react-science/styles/preflight.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\n\nimport { createRoot } from 'react-dom/client';\nimport { HashRouter as Router, Route, Routes } from 'react-router-dom';\nimport { registerSW } from 'virtual:pwa-register';\n\nimport NMRiumWrapper from './NMRiumWrapper';\nimport NMRiumWrapperDemo from './demo/NMRiumWrapperDemo';\n\nconst rootContainer = document.querySelector('#root');\n\nif (!rootContainer) {\n  throw new Error('#root element is not exists in the dom');\n}\n\n// add this to prompt for a refresh\nconst updateSW = registerSW({\n  onNeedRefresh() {\n    // eslint-disable-next-line no-alert\n    if (window.confirm('New NMRium wrappe update available. Reload?')) {\n      void updateSW(true);\n    }\n  },\n});\n\nconst root = createRoot(rootContainer);\n\nfunction RootWrapper() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<NMRiumWrapper />} />\n        <Route path=\"/demo\" element={<NMRiumWrapperDemo />} />\n      </Routes>\n    </Router>\n  );\n}\n\nroot.render(<RootWrapper />);\n"],"file":"assets/index-lGOLyXsz.js"}