var s="text/plain",q="text/html",N=e=>{};function i(e){N(e)}function ve(e){N=e}var O=!0;function pe(){O=!1}function z(){return O}function J(){(console.warn||console.log).apply(console,arguments)}J.bind("[clipboard-polyfill]");var g=typeof window>"u"?void 0:window,K=typeof globalThis>"u"?void 0:globalThis,m,b,w,h=(w=(m=g)==null?void 0:m.Promise)!=null?w:(b=K)==null?void 0:b.Promise;function Q(){if(!h)throw new Error("No `Promise` implementation available for `clipboard-polyfill`. Consider using: https://github.com/lgarron/clipboard-polyfill#flat-file-version-with-promise-included");return h}var y=typeof navigator>"u"?void 0:navigator,a=y==null?void 0:y.clipboard,T,x=(T=a==null?void 0:a.read)==null?void 0:T.bind(a),C,E=(C=a==null?void 0:a.readText)==null?void 0:C.bind(a),S,D=(S=a==null?void 0:a.write)==null?void 0:S.bind(a),P,U=(P=a==null?void 0:a.writeText)==null?void 0:P.bind(a),I,R=(I=g)==null?void 0:I.ClipboardItem,l=Q(),v=g;function W(){return typeof ClipboardEvent>"u"&&typeof(v==null?void 0:v.clipboardData)<"u"&&typeof(v==null?void 0:v.clipboardData.setData)<"u"}function V(e){var r=v.clipboardData.setData("Text",e);return r&&i("writeTextIE worked"),r}function Y(){var e=v.clipboardData.getData("Text");if(e==="")throw new Error("Empty clipboard or could not read plain text from clipboard");return e}function Z(e,r,t){i("listener called"),e.success=!0;for(var n in r){var o=r[n],u=t.clipboardData;u.setData(n,o),n===s&&u.getData(n)!==o&&(i("setting text/plain failed"),e.success=!1)}t.preventDefault()}function A(e){var r={success:!1},t=Z.bind(this,r,e);document.addEventListener("copy",t);try{document.execCommand("copy")}finally{document.removeEventListener("copy",t)}return r.success}function k(e,r){M(e);var t=A(r);return F(),t}function $(e){var r=document.createElement("div");r.setAttribute("style","-webkit-user-select: text !important"),r.textContent="temporary element",document.body.appendChild(r);var t=k(r,e);return document.body.removeChild(r),t}function ee(e){i("copyTextUsingDOM");var r=document.createElement("div");r.setAttribute("style","-webkit-user-select: text !important");var t=r;r.attachShadow&&(i("Using shadow DOM."),t=r.attachShadow({mode:"open"}));var n=document.createElement("span");n.innerText=e,t.appendChild(n),document.body.appendChild(r),M(n);var o=document.execCommand("copy");return F(),document.body.removeChild(r),o}function M(e){var r=document.getSelection();if(r){var t=document.createRange();t.selectNodeContents(e),r.removeAllRanges(),r.addRange(t)}}function F(){var e=document.getSelection();e&&e.removeAllRanges()}function j(e){var r=s in e;if(W()){if(!r)throw new Error("No `text/plain` value was specified.");if(V(e[s]))return!0;throw new Error("Copying failed, possibly because the user rejected it.")}return A(e),navigator.userAgent.indexOf("Edge")>-1?(i('UA "Edge" => assuming success'),!0):k(document.body,e)?(i("copyUsingTempSelection worked"),!0):$(e)?(i("copyUsingTempElem worked"),!0):ee(e[s])?(i("copyTextUsingDOM worked"),!0):!1}function B(e,r){var t=[];for(var n in e){var o=e[n];t.push(r(o))}return l.all(t).then(u=>{for(var d={},c=0;c<e.length;c++)d[e[c]]=u[c];return d})}var re=l.resolve(),te=()=>l.resolve(!0),_=l.resolve(!1);function p(e){return new l((r,t)=>{try{r(e())}catch(n){t(n)}})}function ne(e){var r={};return r[s]=e,r}function fe(e){return p(()=>U?(i("Using `navigator.clipboard.writeText()`."),U(e).catch(L)):l.resolve(L(e)))}function L(e){if(!j(ne(e)))throw new Error("writeText() failed")}function ie(){return p(()=>{if(E)return i("Using `navigator.clipboard.readText()`."),E();if(W()){var e=Y();return l.resolve(e)}throw new Error("Read is not supported in your browser.")})}function f(e,r){for(var t in e){var n=e[t];if(n.types.indexOf(r)!==-1)return!0}return!1}function oe(e,r){var t,n=Object.keys(e),o={};for(var u in e){var d=e[u];typeof d=="string"?o[u]=G(u,d):o[u]=d}var c=(t=r==null?void 0:r.presentationStyle)!=null?t:"unspecified";function X(H){return l.resolve(o[H])}return{types:n,presentationStyle:c,getType:X}}var ae=oe;function G(e,r){return new Blob([r],{type:e})}function le(e){return new l((r,t)=>{var n=new FileReader;n.addEventListener("load",()=>{var o=n.result;typeof o=="string"?r(o):t("could not convert blob to string")}),n.readAsText(e)})}function ue(e){return B(e.types,function(r){return e.getType(r)}).then(r=>{var t={};return e.presentationStyle&&(t.presentationStyle=e.presentationStyle),new R(r,t)})}function se(e){var r={};return r[s]=G(e,s),new ae(r)}function de(e,r){return e.getType(r).then(t=>le(t))}function ce(e){return B(e.types,function(r){return de(e,r)})}function ge(e){return p(()=>{if(D&&R){var r=D;return i("Using `navigator.clipboard.write()`."),l.all(e.map(ue)).then(t=>r(t).then(te).catch(n=>{if(!f(e,s)&&!f(e,q))throw n;return _}))}return _}).then(r=>{if(r)return re;var t=f(e,s);return z()&&!t&&i("clipboard.write() was called without a `text/plain` data type. On some platforms, this may result in an empty clipboard. Call suppressWarnings() to suppress this warning."),ce(e[0]).then(n=>{if(!j(n))throw new Error("write() failed")})})}function me(){return p(()=>x?(i("Using `navigator.clipboard.read()`."),x()):ie().then(e=>[se(e)]))}export{ae as ClipboardItem,me as read,ie as readText,ve as setDebugLog,pe as suppressWarnings,ge as write,fe as writeText};
//# sourceMappingURL=clipboard-polyfill.es6-ca7c5cb5.js.map
