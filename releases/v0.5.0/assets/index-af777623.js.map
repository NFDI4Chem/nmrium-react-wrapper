{"version":3,"mappings":"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","names":["registerSW","options","immediate","onNeedRefresh","onOfflineReady","onRegistered","onRegisteredSW","onRegisterError","wb","registerPromise","sendSkipWaitingMessage","updateServiceWorker","_reloadPage","register","Workbox","__vitePreload","onNeedRefreshCalled","showSkipWaitingPrompt","event","r","e","namespace","trigger","type","data","on","dataListener","eventOptions","allowedOrigins","listener","origin","targetType","url","events","ConfigOnLoadProcessing","Filters","nucleusToString","nucleus","mapFilters","onLoadfilters","digitalFilter","filters","filter","isDeleteAllow","appendFilters","spectra","spectrum","isFid","hasFilters","n","autofilters","getFileNameFromURL","isArrayOfString","loadSpectraFromFiles","files","fileCollection","fileCollectionFromFiles","read","loadSpectraFromURLs","urls","entries","refURL","name","path","readFromWebSource","useLoadSpectra","setData","useState","isLoading","setLoading","load","useCallback","result","error","loadError","useMemo","CURRENT_EXPORT_VERSION","DEFAULT_PREFERENCES","usePreferences","configuration","setConfiguration","useLayoutEffect","href","parameters","preferences","workspace","defaultEmptyMessage","readAllowedOrigins","response","useWhiteList","setAllowedOrigins","isFetchAllowedOriginsPending","startTransition","useTransition","useEffect","whitelist","versionInfo","styles","css","AboutUsModal","isOpenDialog","openDialog","closeDialog","useOnOff","jsxs","Fragment","jsx","InfoButton","Modal","Separator","VersionInfo","version","onClick","NMRiumWrapper","nmriumRef","useRef","setDate","dataChangeHandler","state","source","loadSpectra","loadedData","clearActionListener","request","blob","_a","clearLoadListener","loadData","RootLayout","NMRium","loadFilesFromURLs","fetches","NMRiumWrapperDemo","Button","jsonData","rootContainer","updateSW","root","createRoot","RootWrapper","Router","Routes","Route"],"sources":["../../../../../../../../@vite-plugin-pwa/virtual:pwa-register","../../../src/events/event.ts","../../../src/utilities/appendFilters.ts","../../../src/utilities/getFileNameFromURL.ts","../../../src/utilities/isArrayOfString.ts","../../../src/hooks/useLoadSpectra.ts","../../../src/hooks/usePreferences.ts","../../../src/hooks/useWhiteList.ts","../../../src/versionInfo.ts","../../../src/modal/AboutUsModal.tsx","../../../src/NMRiumWrapper.tsx","../../../src/utilities/loadFilesFromURLs.ts","../../../src/demo/NMRiumWrapperDemo.tsx","../../../src/index.tsx"],"sourcesContent":["// src/client/build/register.ts\nvar autoUpdateMode = \"false\";\nvar selfDestroying = \"false\";\nvar auto = autoUpdateMode === \"true\";\nvar autoDestroy = selfDestroying === \"true\";\nfunction registerSW(options = {}) {\n  const {\n    immediate = false,\n    onNeedRefresh,\n    onOfflineReady,\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  } = options;\n  let wb;\n  let registerPromise;\n  let sendSkipWaitingMessage;\n  const updateServiceWorker = async (_reloadPage = true) => {\n    await registerPromise;\n    if (!auto) {\n      await sendSkipWaitingMessage?.();\n    }\n  };\n  async function register() {\n    if (\"serviceWorker\" in navigator) {\n      const { Workbox } = await import(\"workbox-window\");\n      wb = new Workbox(\"./sw.js\", { scope: \"./\", type: \"classic\" });\n      sendSkipWaitingMessage = async () => {\n        await wb?.messageSkipWaiting();\n      };\n      if (!autoDestroy) {\n        if (auto) {\n          wb.addEventListener(\"activated\", (event) => {\n            if (event.isUpdate || event.isExternal)\n              window.location.reload();\n          });\n          wb.addEventListener(\"installed\", (event) => {\n            if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n        } else {\n          let onNeedRefreshCalled = false;\n          const showSkipWaitingPrompt = () => {\n            onNeedRefreshCalled = true;\n            wb?.addEventListener(\"controlling\", (event) => {\n              if (event.isUpdate)\n                window.location.reload();\n            });\n            onNeedRefresh?.();\n          };\n          wb.addEventListener(\"installed\", (event) => {\n            if (typeof event.isUpdate === \"undefined\") {\n              if (typeof event.isExternal !== \"undefined\") {\n                if (event.isExternal)\n                  showSkipWaitingPrompt();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              } else {\n                if (event.isExternal)\n                  window.location.reload();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              }\n            } else if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n          wb.addEventListener(\"waiting\", showSkipWaitingPrompt);\n          wb.addEventListener(\"externalwaiting\", showSkipWaitingPrompt);\n        }\n      }\n      wb.register({ immediate }).then((r) => {\n        if (onRegisteredSW)\n          onRegisteredSW(\"./sw.js\", r);\n        else\n          onRegistered?.(r);\n      }).catch((e) => {\n        onRegisterError?.(e);\n      });\n    }\n  }\n  registerPromise = register();\n  return updateServiceWorker;\n}\nexport {\n  registerSW\n};\n","import { EventType, EventData } from './types';\n\nconst namespace = 'nmr-wrapper';\n\nfunction trigger<T extends EventType>(type: T, data: EventData<T>) {\n  window.parent.postMessage({ type: `${namespace}:${type}`, data }, '*');\n}\n\nfunction on<T extends EventType>(\n  type: T,\n  dataListener: (data: EventData<T>) => void,\n  options: {\n    eventOptions?: boolean | AddEventListenerOptions;\n    allowedOrigins?: string[];\n  } = {},\n) {\n  const { eventOptions, allowedOrigins = [] } = options;\n\n  function listener(event: MessageEvent) {\n    const {\n      origin,\n      data: { type: targetType, data },\n    } = event;\n\n    const url = new URL(origin);\n\n    const skipOriginCheck =\n      allowedOrigins.length === 0 || allowedOrigins.includes('*');\n\n    if (!skipOriginCheck && !allowedOrigins.includes(url.origin)) {\n      throw new Error(`Invalid Origin ${origin}`);\n    }\n\n    if (`${namespace}:${type}` === targetType) {\n      dataListener?.(data);\n    }\n  }\n  window.addEventListener(`message`, listener, eventOptions);\n\n  return () => window.removeEventListener(`message`, listener);\n}\n\nexport default { trigger, on };\n","import { Spectrum } from 'nmr-load-save';\nimport { BaseFilter, Filter, Filters, Nucleus } from 'nmr-processing';\n\nconst ConfigOnLoadProcessing: Partial<Record<Nucleus, BaseFilter[]>> = {\n  '1H': [\n    {\n      name: Filters.digitalFilter.id,\n      label: Filters.digitalFilter.name,\n      value: {},\n      flag: true,\n    },\n    {\n      name: Filters.apodization.id,\n      label: Filters.apodization.name,\n      value: {},\n      flag: false,\n    },\n    {\n      name: Filters.zeroFilling.id,\n      label: Filters.zeroFilling.name,\n      value: {},\n      flag: true,\n    },\n    {\n      name: Filters.fft.id,\n      label: Filters.fft.name,\n      value: {},\n      flag: true,\n    },\n    {\n      name: Filters.phaseCorrection.id,\n      label: Filters.phaseCorrection.name,\n\n      value: {},\n      flag: true,\n    },\n  ],\n  '13C': [\n    {\n      name: Filters.digitalFilter.id,\n      label: Filters.digitalFilter.name,\n\n      value: {},\n      flag: true,\n    },\n    {\n      name: Filters.apodization.id,\n      label: Filters.apodization.name,\n      value: {},\n      flag: true,\n    },\n    {\n      name: Filters.zeroFilling.id,\n      label: Filters.zeroFilling.name,\n\n      value: {},\n      flag: true,\n    },\n    {\n      name: Filters.fft.id,\n      label: Filters.fft.name,\n\n      value: {},\n      flag: true,\n    },\n    {\n      name: Filters.phaseCorrection.id,\n      label: Filters.phaseCorrection.name,\n\n      value: {},\n      flag: true,\n    },\n  ],\n};\n\nfunction nucleusToString(nucleus: string | string[]) {\n  return typeof nucleus === 'string' ? nucleus : nucleus.join(',');\n}\n\ninterface filterFiltersOptions {\n  digitalFilter?: number;\n}\n\nfunction mapFilters(\n  onLoadfilters: BaseFilter[],\n  options: filterFiltersOptions,\n) {\n  const { digitalFilter } = options;\n  const filters: BaseFilter[] = [];\n\n  for (let filter of onLoadfilters) {\n    if (\n      (!digitalFilter && filter.name === Filters.digitalFilter.id) ||\n      !filter.flag\n    ) {\n      continue;\n    }\n    const isDeleteAllow = !(filter.name === Filters.digitalFilter.id);\n    filter = { ...filter, isDeleteAllow };\n    filters.push(filter);\n  }\n  return filters;\n}\n\nexport function appendFilters(spectra: Spectrum[]) {\n  for (const spectrum of spectra) {\n    const {\n      info: { nucleus, isFid, digitalFilter },\n      filters,\n    } = spectrum;\n    const hasFilters = filters.length > 0;\n    if (isFid && !hasFilters) {\n      const n = nucleusToString(nucleus);\n      const onLoadfilters: BaseFilter[] = ConfigOnLoadProcessing?.[n] || [];\n      if (onLoadfilters.length > 0) {\n        const autofilters = mapFilters(onLoadfilters, { digitalFilter });\n        spectrum.filters = autofilters as Filter[];\n      }\n    }\n  }\n}\n","export function getFileNameFromURL(url: string) {\n  return url.slice(Math.max(0, url.lastIndexOf('/') + 1));\n}\n","//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isArrayOfString(data: any[]) {\n  return data.every((url) => typeof url === 'string');\n}\n","import { fileCollectionFromFiles } from 'filelist-utils';\nimport {\n  read,\n  readFromWebSource,\n  NmriumState,\n  CURRENT_EXPORT_VERSION,\n} from 'nmr-load-save';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport events from '../events';\nimport { appendFilters } from '../utilities/appendFilters';\nimport { getFileNameFromURL } from '../utilities/getFileNameFromURL';\nimport { isArrayOfString } from '../utilities/isArrayOfString';\n\nasync function loadSpectraFromFiles(files: File[]) {\n  const fileCollection = await fileCollectionFromFiles(files);\n\n  const {\n    nmriumState: { data },\n  } = await read(fileCollection);\n  return data;\n}\n\nasync function loadSpectraFromURLs(urls: string[]) {\n  const entries = urls.map((url) => {\n    const refURL = new URL(url);\n    const name = getFileNameFromURL(url);\n    let path = refURL.pathname;\n    const hasExtension = name && name.includes('.');\n    if (!hasExtension) {\n      path = `${path}.zip`;\n    }\n    return { relativePath: path, baseURL: refURL.origin };\n  }, []);\n\n  const { data } = await readFromWebSource({ entries });\n  return data;\n}\n\ntype NMRiumData = NmriumState['data'];\n\nexport function useLoadSpectra() {\n  const [data, setData] = useState<NMRiumData>({ spectra: [], molecules: [] });\n  const [isLoading, setLoading] = useState<boolean>(false);\n\n  const load = useCallback(\n    async (options: { urls: string[] } | { files: File[] }) => {\n      setLoading(true);\n      try {\n        if ('urls' in options) {\n          if (isArrayOfString(options.urls)) {\n            const result = await loadSpectraFromURLs(options.urls);\n            if (result?.spectra) {\n              appendFilters(result?.spectra);\n            }\n            setData(result as NMRiumData);\n          } else {\n            throw new Error('The input must be a valid urls array of string[]');\n          }\n        } else if ('files' in options) {\n          const result = await loadSpectraFromFiles(options.files);\n          if (result?.spectra) {\n            appendFilters(result?.spectra);\n          }\n          setData(result as NMRiumData);\n        }\n      } catch (error: unknown) {\n        const loadError = error as Error;\n        events.trigger('error', loadError);\n        // eslint-disable-next-line no-console\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [],\n  );\n\n  return useMemo(\n    () => ({\n      data: { version: CURRENT_EXPORT_VERSION, data },\n      load,\n      isLoading,\n    }),\n    [data, isLoading, load],\n  );\n}\n","import { WorkspacePreferences } from 'nmr-load-save';\nimport { NMRiumWorkspace } from 'nmrium';\nimport { useLayoutEffect, useState } from 'react';\n\ninterface Preferences {\n  preferences: WorkspacePreferences | undefined;\n  workspace: NMRiumWorkspace | undefined;\n  defaultEmptyMessage: string | undefined;\n}\n\nconst DEFAULT_PREFERENCES = {\n  preferences: undefined,\n  workspace: undefined,\n  defaultEmptyMessage: undefined,\n};\n\nexport function usePreferences() {\n  const [configuration, setConfiguration] =\n    useState<Preferences>(DEFAULT_PREFERENCES);\n\n  useLayoutEffect(() => {\n    const { href } = window.location;\n    const parameters = new URL(href).searchParams;\n\n    let preferences: WorkspacePreferences | undefined;\n    let workspace: NMRiumWorkspace | undefined;\n    let defaultEmptyMessage: string | undefined;\n\n    if (parameters.has('workspace')) {\n      workspace = parameters.get('workspace') as NMRiumWorkspace;\n    }\n    if (parameters.has('preferences')) {\n      preferences = JSON.parse(parameters.get('preferences') || '');\n    }\n\n    if (parameters.has('defaultEmptyMessage')) {\n      defaultEmptyMessage = parameters.get('defaultEmptyMessage') as string;\n    }\n    setConfiguration({ preferences, workspace, defaultEmptyMessage });\n  }, []);\n\n  return configuration;\n}\n","import { useEffect, useState, useTransition } from 'react';\n\nasync function readAllowedOrigins() {\n  return fetch(\n    'https://raw.githubusercontent.com/NFDI4Chem/nmrium-react-wrapper/main/src/allowed-origins.json',\n  ).then((response) => response.json());\n}\n\nexport function useWhiteList() {\n  const [allowedOrigins, setAllowedOrigins] = useState([]);\n  const [isFetchAllowedOriginsPending, startTransition] = useTransition();\n\n  useEffect(() => {\n    startTransition(() => {\n      void readAllowedOrigins().then((whitelist) =>\n        setAllowedOrigins(whitelist),\n      );\n    });\n  }, []);\n\n  return {\n    allowedOrigins,\n    isFetchAllowedOriginsPending,\n  };\n}\n","export default { version: 'HEAD' };\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Modal, useOnOff } from 'react-science/ui';\n\nimport versionInfo from '../versionInfo';\n\nconst styles = css`\n  width: 30vw;\n  min-width: 400px;\n  display: flex;\n  flex-direction: column;\n  user-select: none;\n\n  button:focus {\n    outline: none;\n  }\n\n  .container {\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  span.title {\n    font-weight: bold;\n    color: #ea580c;\n    font-size: 2em;\n  }\n\n  a {\n    color: #969696;\n  }\n\n  a:hover,\n  a:focus {\n    color: #00bcd4;\n  }\n\n  .header {\n    span {\n      color: #464646;\n      font-size: 15px;\n      flex: 1;\n      user-select: none;\n    }\n  }\n`;\n\nfunction AboutUsModal() {\n  const [isOpenDialog, openDialog, closeDialog] = useOnOff(false);\n  return (\n    <>\n      <InfoButton onClick={openDialog} />\n      <Modal\n        hasCloseButton\n        isOpen={isOpenDialog}\n        onRequestClose={closeDialog}\n        maxWidth={1000}\n      >\n        <div css={styles}>\n          <Modal.Header>\n            <div className=\"header\">\n              <span>About NMRium react wrapper</span>\n            </div>\n          </Modal.Header>\n          <div className=\"container\">\n            <span className=\"title\"> NMRium react wrapper</span>\n            <Separator />\n            Version <VersionInfo />\n            <Separator />\n            <a\n              href=\"https://github.com/NFDI4Chem/nmrium-react-wrapper\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              GitHub ( https://github.com/NFDI4Chem/nmrium-react-wrapper )\n            </a>\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n}\n\nexport default AboutUsModal;\n\nfunction VersionInfo() {\n  const { version } = versionInfo;\n  if (version === 'HEAD') {\n    return <>HEAD</>;\n  } else if (version.startsWith('git-')) {\n    return (\n      <a\n        href={`https://github.com/NFDI4Chem/nmrium-react-wrapper/tree/${version.slice(\n          4,\n        )}`}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        git-{version.slice(4, 14)}\n      </a>\n    );\n  } else {\n    return (\n      <a\n        href={`https://github.com/NFDI4Chem/nmrium-react-wrapper/tree/${version}`}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        {version}\n      </a>\n    );\n  }\n}\n\nfunction InfoButton({ onClick }) {\n  return (\n    <button\n      onClick={onClick}\n      type=\"button\"\n      style={{\n        fontSize: '13px',\n        textAlign: 'center',\n        width: '25px',\n        height: '25px',\n        borderRadius: '25px',\n        border: '0.55px solid #ea580c',\n        left: '5px',\n        bottom: '10px',\n        position: 'absolute',\n      }}\n    >\n      &#9432;\n    </button>\n  );\n}\n\nfunction Separator() {\n  return (\n    <span\n      style={{\n        borderBottom: '1px solid gray',\n        width: '15px',\n        height: '1px',\n        margin: '10px 0',\n      }}\n    />\n  );\n}\n","import { NMRium, NMRiumData, NMRiumRef, NMRiumChangeCb } from 'nmrium';\nimport { useEffect, useState, useCallback, CSSProperties, useRef } from 'react';\nimport { RootLayout } from 'react-science/ui';\n\nimport events from './events';\nimport { useLoadSpectra } from './hooks/useLoadSpectra';\nimport { usePreferences } from './hooks/usePreferences';\nimport { useWhiteList } from './hooks/useWhiteList';\nimport AboutUsModal from './modal/AboutUsModal';\n\nconst styles: Record<'container' | 'loadingContainer', CSSProperties> = {\n  container: {\n    height: '100%',\n    width: '100%',\n    position: 'relative',\n  },\n\n  loadingContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    zIndex: 1,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#ffffffc9',\n    fontSize: '1.4em',\n    userSelect: 'none',\n    WebkitUserSelect: 'none',\n  },\n};\n\nexport default function NMRiumWrapper() {\n  const { allowedOrigins, isFetchAllowedOriginsPending } = useWhiteList();\n  const nmriumRef = useRef<NMRiumRef>(null);\n  const [data, setDate] = useState<NMRiumData>();\n\n  const { workspace, preferences, defaultEmptyMessage } = usePreferences();\n  const dataChangeHandler = useCallback<NMRiumChangeCb>((state, source) => {\n    events.trigger('data-change', { state, source });\n  }, []);\n\n  const { load: loadSpectra, isLoading, data: loadedData } = useLoadSpectra();\n\n  useEffect(() => {\n    if (!isLoading) {\n      setDate(loadedData as unknown as NMRiumData);\n    }\n  }, [isLoading, loadedData]);\n\n  useEffect(() => {\n    const clearActionListener = events.on(\n      'action-request',\n      (request) => {\n        switch (request.type) {\n          case 'exportSpectraViewerAsBlob': {\n            const blob = nmriumRef.current?.getSpectraViewerAsBlob();\n            if (blob) {\n              events.trigger('action-response', {\n                type: request.type,\n                data: blob,\n              });\n            }\n            break;\n          }\n          default: {\n            throw new Error(\n              `ERROR! Property 'type' accept only 'exportViewerAsBlob'.`,\n            );\n          }\n        }\n      },\n      { allowedOrigins },\n    );\n    const clearLoadListener = events.on(\n      'load',\n      (loadData) => {\n        switch (loadData.type) {\n          case 'nmrium':\n            setDate(loadData.data);\n            break;\n          case 'file':\n            void loadSpectra({ files: loadData.data });\n            break;\n          case 'url':\n            void loadSpectra({ urls: loadData.data });\n            break;\n\n          default: {\n            throw new Error(\n              `ERROR! Property 'type' accept only nmrium, url or file.`,\n            );\n          }\n        }\n      },\n      { allowedOrigins },\n    );\n\n    return () => {\n      clearLoadListener();\n      clearActionListener();\n    };\n  });\n\n  return (\n    <RootLayout style={styles.container}>\n      {' '}\n      {isFetchAllowedOriginsPending && (\n        <div style={styles.loadingContainer}>\n          <span>Loading .... </span>\n        </div>\n      )}\n      <NMRium\n        ref={nmriumRef}\n        data={data}\n        onChange={dataChangeHandler}\n        preferences={preferences}\n        workspace={workspace}\n        emptyText={defaultEmptyMessage}\n      />\n      <AboutUsModal />\n    </RootLayout>\n  );\n}\n\nexport { type NMRiumData } from 'nmrium';\n","import { getFileNameFromURL } from './getFileNameFromURL';\n\nexport function loadFilesFromURLs(urls: string[]): Promise<File[]> {\n  const fetches = urls.map((url) =>\n    fetch(url)\n      .then((response) => response.arrayBuffer())\n      .then((data) => {\n        let name = getFileNameFromURL(url);\n        const hasExtension = name && name.includes('.');\n        if (!hasExtension) {\n          name = `${name}.zip`;\n        }\n        return new File([data], name);\n      }),\n  );\n\n  return Promise.all(fetches);\n}\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { NMRiumData } from 'nmrium';\nimport Button from 'nmrium/lib/component/elements/Button';\n\nimport NMRiumWrapper from '../NMRiumWrapper';\nimport events from '../events';\nimport { loadFilesFromURLs } from '../utilities/loadFilesFromURLs';\n\nimport jsonData from './data/test.json';\n\nconst styles = {\n  container: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  `,\n  header: css`\n    height: 40px;\n    width: 100%;\n    padding: 5px;\n    display: flex;\n  `,\n};\n\nexport default function NMRiumWrapperDemo() {\n  return (\n    <div css={styles.container}>\n      <div id=\"header\" css={styles.header}>\n        <Button.Done\n          style={{ marginRight: '10px' }}\n          onClick={() => {\n            events.trigger('load', {\n              data: jsonData as NMRiumData,\n              type: 'nmrium',\n            });\n          }}\n        >\n          Test load from json\n        </Button.Done>\n\n        <Button.Done\n          style={{ marginRight: '10px' }}\n          onClick={() => {\n            events.trigger('load', {\n              data: [\n                'https://cheminfo.github.io/nmr-dataset-demo/cytisine/13c.jdx',\n                'https://cheminfo.github.io/nmr-dataset-demo/cytisine/1h.jdx',\n                'https://cheminfo.github.io/bruker-data-test/data/zipped/aspirin-1h.zip',\n                // '../data/13c.zip',\n                // 'https://cloud.uni-jena.de/s/y72GbCX8bJbmpJT/download/10.zip',\n                // 'https://cloud.uni-jena.de/s/jsMed9fmqWZzo6r/download/53.zip',\n              ],\n              type: 'url',\n            });\n          }}\n        >\n          Test Load from URLS\n        </Button.Done>\n\n        <Button.Done\n          style={{ marginRight: '10px' }}\n          onClick={() => {\n            events.trigger('load', {\n              data: [\n                'https://cheminfo.github.io/bruker-data-test/data/zipped/aspirin-1h',\n              ],\n              type: 'url',\n            });\n          }}\n        >\n          Test Load URL without extension\n        </Button.Done>\n        <Button.Done\n          onClick={() => {\n            void loadFilesFromURLs([\n              '../data/COSY-12.zip',\n              '../data/HMBC-13.zip',\n              '../data/13c.zip',\n            ]).then((files) => {\n              events.trigger('load', {\n                data: files,\n                type: 'file',\n              });\n            });\n          }}\n        >\n          Test Load Files\n        </Button.Done>\n      </div>\n\n      <NMRiumWrapper />\n    </div>\n  );\n}\n","import 'react-science/styles/preflight.css';\n\nimport { createRoot } from 'react-dom/client';\nimport { HashRouter as Router, Route, Routes } from 'react-router-dom';\nimport { registerSW } from 'virtual:pwa-register';\n\nimport NMRiumWrapper from './NMRiumWrapper';\nimport NMRiumWrapperDemo from './demo/NMRiumWrapperDemo';\n\nconst rootContainer = document.querySelector('#root');\n\nif (!rootContainer) {\n  throw new Error('#root element is not exists in the dom');\n}\n\n// add this to prompt for a refresh\nconst updateSW = registerSW({\n  onNeedRefresh() {\n    // eslint-disable-next-line no-alert\n    if (window.confirm('New NMRium wrappe update available. Reload?')) {\n      void updateSW(true);\n    }\n  },\n  onOfflineReady() {\n    // eslint-disable-next-line no-alert\n    window.alert('NMRium wrapper is ready to run in offline mode');\n  },\n});\n\nconst root = createRoot(rootContainer);\n\nfunction RootWrapper() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<NMRiumWrapper />} />\n        <Route path=\"/demo\" element={<NMRiumWrapperDemo />} />\n      </Routes>\n    </Router>\n  );\n}\n\nroot.render(<RootWrapper />);\n"],"file":"assets/index-af777623.js"}